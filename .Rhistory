#Area under the curve: 0.9444
?nnet
############# Quick Nerual Network  ####################
nnet1 <- nnet(class~., data = train, size = 3)
nnet_pred = predict(nnet1, type = "class", newdata = test)
plot(nnet1)
ROC2 <- roc(test$class, as.numeric(svm_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
AUC2 <- auc(ROC2)
AUC2
############# Quick Nerual Network  ####################
nnet1 <- nnet(class~., data = train, size = 8)
nnet_pred = predict(nnet1, type = "class", newdata = test)
plot(nnet1)
ROC2 <- roc(test$class, as.numeric(svm_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
############# Quick Nerual Network  ####################
nnet1 <- nnet(class~., data = train, size = 4)
nnet_pred = predict(nnet1, type = "class", newdata = test)
plot(nnet1)
ROC2 <- roc(test$class, as.numeric(svm_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
rf1 = randomForest(class~., data = train)
fr_pred_test = predict(rf1, type = "response", newdata = test)
auc(test$class, as.numeric(fr_pred_test), plot = T)
#Area under the curve: 0.9126
nnet1 <- nnet(class~., data = train, size = 2)
nnet_pred = predict(nnet1, type = "class", newdata = test)
plot(nnet1)
ROC2 <- roc(test$class, as.numeric(svm_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
#Area under the curve: 0.9444
View(nnet1)
nnet1 <- nnet(class~., data = train, size = 2)
nnet_pred = predict(nnet1, type = "class", newdata = test)
plot(nnet1)
ROC2 <- roc(test$class, as.numeric(svm_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
#Area under the curve: 0.9444
nnet1 <- nnet(class~., data = train, size = 2)
nnet_pred = predict(nnet1, type = "class", newdata = test)
plot(nnet1)
ROC2 <- roc(test$class, as.numeric(svm_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
#Area under the curve: 0.9444
AUC2
str(train)
?nnet
nnet1 <- nnet(class~., data = train, size = 2)
nnet1 <- nnet(class~., data = train, size = 2)
nnet_pred = predict(nnet1, type = "class", newdata = test)
plot(nnet1)
ROC2 <- roc(test$class, as.numeric(svm_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
nnet1 <- nnet(class~., data = train, size = 2)
nnet_pred = predict(nnet1, type = "class", newdata = test)
plot(nnet1)
ROC2 <- roc(test$class, as.numeric(svm_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
#Area under the curve: 0.9444
rm(list = ls())
require(ggplot2)
require(e1071)
require(Hmisc)
require(pROC)
require(caret)
require(rsample)      # data splitting
require(randomForest) # basic implementation
require(neuralnet)
require(ROCR)
require(nnet)
require(corrplot)
require(xgboost)
require(hrbrthemes)
#Load data
pulsar <- read.csv("pulsar_stars.csv", header = T)
names(pulsar) = c("mean_int_prof","std_int_prof","excess_kurt_int_prof",
"skew_int_prof","mean_dm_snr","std_dm_snr",
"excess_kurt_dm_snr","skew_dm_snr","class")
#EDA and Cleaning
pulsar$class = as.factor(pulsar$class)
apply(pulsar, 2, function(x) any(is.na(x))) # check for NA missing data
#no missing values
head(pulsar, 3)
str(pulsar)
ggplot(pulsar) +
aes(x = excess_kurt_int_prof, y = excess_kurt_dm_snr, colour = class) +
geom_point(size = 1.06) +
scale_color_viridis_d(option = "viridis") +
labs(x = "Excess Kurtosis of Integrated Profile", y = "Excess Kurtosis of DM SNR Curve", title = "Pulsars") +
theme_modern_rc() +
facet_wrap(vars(class))
ggplot(pulsar) +
aes(x = mean_int_prof, y = mean_dm_snr, colour = class) +
geom_point(size = 1.06) +
scale_color_viridis_d(option = "viridis") +
labs(x = "Mean of Integrated Profile", y = "Mean of DM SNR Curve", title = "Pulsars") +
theme_modern_rc() +
facet_wrap(vars(class))
ggplot(pulsar,aes(x = mean_int_prof, y = excess_kurt_int_prof)) +
geom_point(na.rm = T, aes(color = mean_dm_snr)) + geom_smooth()
#lets make a scatter plot to see the correlation visually
ggplot(data = pulsar, aes(x=std_dm_snr, y=excess_kurt_dm_snr))+
geom_point()
#lets perform a f(x) = 1/x transformation to make the data linear...
ggplot(data = pulsar, aes(x=1/std_dm_snr, y=excess_kurt_dm_snr))+
geom_point()+
geom_smooth(method="lm")
#polynomial might give us a better fit
ggplot(data = pulsar, aes(x=1/std_dm_snr, y=excess_kurt_dm_snr))+
geom_point()+
geom_smooth(method="lm", formula = y ~ poly(x,3))
pulsar$class = as.numeric(pulsar$class)-1
correlation_matrix = cor(pulsar)
corrplot(correlation_matrix, method="circle", bg = "grey", title = "Correlation Matrix")
cor.test(pulsar$std_int_prof, pulsar$excess_kurt_dm_snr)
pulsar$class = as.factor(pulsar$class)
test_ind = sample(1:(nrow(pulsar)/10)) #10% of the data is in the test set
train = pulsar[-test_ind,]
test = pulsar[test_ind,]
#Lets try logistic regression first...
logistic_model =  glm(class~., data = train, family = "binomial")
summary(logistic_model)
#It seems a bit odd that excess kurtosis and skew of the DM SNR curve are not significant predictors of pulsars,
#especially considering that the mean and standard deviation are highly significant.
p1 = predict(logistic_model, type = "response", newdata = test)
auc(test$class, p1, plot = T)   #sensitivity = TP rate  specificity = TN rate
###########################    Support Vector Machine    ####################
svmfit1 <- svm(class ~ ., data = train, kernel = "linear")
plot(svmfit1, train, mean_int_prof~std_int_prof, svSymbol = 8, dataSymbol = 1, symbolPalette = rainbow(2),
color.palette = topo.colors)
svm_predictions = predict(svmfit1, newdata = test)
ROC1 <- roc(test$class, as.numeric(svm_predictions)-1)
plot(ROC1, col = "blue")
AUC1 <- auc(ROC1)
AUC1
############### Random Forest Time  #############################
rf1 = randomForest(class~., data = train)
fr_pred_test = predict(rf1, type = "response", newdata = test)
auc(test$class, as.numeric(fr_pred_test), plot = T)
############# Quick Nerual Network  ####################
nnet1 <- nnet(class~., data = train, size = 2)
nnet_pred = predict(nnet1, type = "class", newdata = test)
plot(nnet1)
ROC2 <- roc(test$class, as.numeric(svm_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
############# Quick Nerual Network  ####################
nnet1 <- nnet(class~., data = train, size = 4)
nnet_pred = predict(nnet1, type = "class", newdata = test)
plot(nnet1)
ROC2 <- roc(test$class, as.numeric(svm_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
############# Quick Nerual Network  ####################
nnet1 <- nnet(formula = class~., data = train, size = 4)
nnet_pred = predict(nnet1, type = "class", newdata = test)
plot(nnet1)
ROC2 <- roc(test$class, as.numeric(svm_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
nnet1 <- nnet(class~., data = train, size = 2)
nnet_pred = predict(nnet1, type = "class", newdata = test)
plot(nnet1)
ROC2 <- roc(test$class, as.numeric(svm_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
#Area under the curve: 0.9444
nnet1 <- nnet(class~., data = train, size = 2)
nnet_pred = predict(nnet1, type = "class", newdata = test)
plot(nnet1)
ROC2 <- roc(test$class, as.numeric(svm_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
#Area under the curve: 0.9444
nnet1 <- nnet(formula = class~., data = train, size = 4)
nnet_pred = predict(nnet1, type = "class", newdata = test)
plot(nnet1)
ROC2 <- roc(test$class, as.numeric(nnet_pred)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
#Area under the curve: 0.9444
nnet_pred
as.numeric(nnet_pred)
str(nnet_pred)
nnet1 <- nnet(formula = class~., data = train, size = 4)
nnet_pred = predict(nnet1, type = "class", newdata = test)
plot(nnet1)
ROC2 <- roc(test$class, as.numeric(nnet_pred))
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
#Area under the curve: 0.9444
?nnet
str(train)
train[1:9]
nnet2 = nnet(formula = class~., x = train[1:8], y = train[9], data = train, size = 4)
as.numeric(train[9])
as.numeric(train$class)
nnet2 = nnet(formula = class~., x = train[1:8], y = as.numeric(train$class) - 1, data = train, size = 4)
nnet1 = nnet(formula = class~., x = train[1:8], y = as.numeric(train$class) - 1, data = train, size = 4)
nnet_pred = predict(nnet1, type = "class", newdata = test)
nn2 = nnet(formula = class~., x = train[1:8], y = as.numeric(train$class) - 1, data = train, size = 4)
nnet_pred = predict(nn2, type = "class", newdata = test)
nn2 = nnet(formula = class~., x = train[-9], y = as.numeric(train$class) - 1, data = train, size = 4)
nnet_pred = predict(nn2, type = "class", newdata = test)
nnet_pred = predict(nn2, type = "response", newdata = test)
?predict
nn2 = nnet(class~., data = train, size = 2)
nnet_predictions = predict(nn2, newdata = test)
plot(nn2)
nn2 = nnet(class~., data = train, size = 2)
nnet_predictions = predict(nn2, newdata = test)
plot(nn2)
#Area under the curve: 0.9444
nn2 = nnet(class~., data = train, size = 2)
nn2 = nnet(class~., data = train, size = 2)
str(train)
View(train)
View(train)
nn2 = nnet(class~., data = train, size = 2)
plot(nn2)
nn2 = nnet(class~., data = train, size = 2)
nnet_predictions = predict(nn2, newdata = test)
plot(nn2)
ROC2 <- roc(test$class, as.numeric(nnet_pred))
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
head(pulsar, 3)
str(pulsar)
ggplot(pulsar) +
aes(x = excess_kurt_int_prof, y = excess_kurt_dm_snr, colour = class) +
geom_point(size = 1.06) +
scale_color_viridis_d(option = "viridis") +
labs(x = "Excess Kurtosis of Integrated Profile", y = "Excess Kurtosis of DM SNR Curve", title = "Pulsars") +
theme_modern_rc() +
facet_wrap(vars(class))
ggplot(pulsar) +
aes(x = mean_int_prof, y = mean_dm_snr, colour = class) +
geom_point(size = 1.06) +
scale_color_viridis_d(option = "viridis") +
labs(x = "Mean of Integrated Profile", y = "Mean of DM SNR Curve", title = "Pulsars") +
theme_modern_rc() +
facet_wrap(vars(class))
#Just based on these 4 variables the data looks seperable upon first glance...
ggplot(pulsar,aes(x = mean_int_prof, y = excess_kurt_int_prof)) +
geom_point(na.rm = T, aes(color = mean_dm_snr)) + geom_smooth()
#lets make a scatter plot to see the correlation visually
ggplot(data = pulsar, aes(x=std_dm_snr, y=excess_kurt_dm_snr))+
geom_point()
#lets perform a f(x) = 1/x transformation to make the data linear...
ggplot(data = pulsar, aes(x=1/std_dm_snr, y=excess_kurt_dm_snr))+
geom_point()+
geom_smooth(method="lm")
#polynomial might give us a better fit
ggplot(data = pulsar, aes(x=1/std_dm_snr, y=excess_kurt_dm_snr))+
geom_point()+
geom_smooth(method="lm", formula = y ~ poly(x,3))
pulsar$class = as.numeric(pulsar$class)-1
correlation_matrix = cor(pulsar)
corrplot(correlation_matrix, method="circle", bg = "grey", title = "Correlation Matrix")
cor.test(pulsar$std_int_prof, pulsar$excess_kurt_dm_snr)
pulsar$class = as.factor(pulsar$class)
as.numeric(svm_predictions)-1
as.numeric(nnet_predictions)-1
?roc
nn2 = nnet(class~., data = train, size = 2)
nnet_predictions = predict(nn2, newdata = test)
plot(nn2)
ROC2 <- roc(test$class, as.numeric(nnet_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
unlink('pulsar_cache', recursive = TRUE)
nn2 = nnet(class~., data = train, size = 2)
nnet_predictions = predict(nn2, newdata = test)
plot(nn2)
ROC2 <- roc(test$class, as.numeric(nnet_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
nn2 = nnet(class~., data = train, size = 2)
nnet_predictions = predict(nn2, newdata = test)
plot(nn2)
ROC2 <- roc(test$class, as.numeric(nnet_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
nn2 = nnet(class~., data = train, size = 2)
nnet_predictions = predict(nn2, newdata = test)
plot(nn2)
ROC2 <- roc(test$class, as.numeric(nnet_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
nn2 = nnet(class~., data = train, size = 2)
nnet_predictions = predict(nn2, newdata = test)
plot(nn2)
ROC2 <- roc(test$class, as.numeric(nnet_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
View(train)
rf1 = randomForest(class~., data = train)
fr_pred_test = predict(rf1, type = "response", newdata = test)
auc(test$class, as.numeric(fr_pred_test), plot = T)
str(train)
#Area under the curve: 0.9126
rf1 = randomForest(class~., data = train)
fr_pred_test = predict(rf1, type = "response", newdata = test)
auc(test$class, as.numeric(fr_pred_test), plot = T)
str(train)
nn2 = nnet(class~., data = train, size = 2)
#Area under the curve: 0.9126
nn2 = nnet(class~., data = train, size = 2)
nnet_predictions = predict(nn2, newdata = test)
plot(nn2)
ROC2 <- roc(test$class, as.numeric(nnet_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
############# Quick Nerual Network  ####################
library(neuralnet)
nn <- neuralnet(class ~ ., data=train, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
nn$result.matrix
plot(nn)
nn_pred = predict(nn, newdata = test)
head(nn_pred)
nn_pred = predict(nn, newdata = test, type = "response")
head(nn_pred)
auc(test$class, as.numeric(nn_pred), plot = T)
length(nn_pred)
length(test$class)
nn_pred = predict(nn, newdata = test, type = "response")
dim(test)
dim(nn_pred)
head(nn_pred)
nn_pred
nn_pred = predict(nn, newdata = test)
auc(test$class, as.numeric(nn_pred), plot = T)
dim(test)
nn_pred = predict(nn, newdata = test)
dim(nn_pred)
auc(test$class, as.numeric(nn_pred), plot = T)
dim(test$class)
dim(test$class)
test$class
length(test$class)
as.numeric(nn_pred)
auc(test$class, nn_pred, plot = T)
ROC1 <- roc(test$class, nn_pred)
str(fr_pred_test)
nn_pred = predict(nn, type = "response", newdata = test)
ROC1 <- roc(test$class, nn_pred)
nn_pred
ROC1 <- roc([test$class, nn_pred[2])
ROC1 <- roc(test$class, nn_pred[2])
library(neuralnet)
nn <- neuralnet(class ~ ., data=train, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
plot(nn)
library(neuralnet)
nn <- neuralnet(class ~ ., data=train, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
library(neuralnet)
nn <- neuralnet(class ~ ., data=train, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
############# Quick Nerual Network  ####################
nn <- nnet(class~., data = train, size = 4)
nn_pred = predict(nn2, newdata = test)
plot(nn2)
?plot.nnet
############# Quick Nerual Network  ####################
nn <- nnet(class~., data = train, size = 4)
nn_pred = predict(nn2, newdata = test)
############# Quick Nerual Network  ####################
nn <- nnet(class~., data = train, size = c(4,2))
############# Quick Nerual Network  ####################
nn <- nnet(class~., data = train, size = 2)
nn_pred = predict(nn2, newdata = test)
plot(nn2)
ROC2 <- roc(test$class, as.numeric(nnet_predictions)-1)
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
auc(test$class, nn_pred)
auc(test$class, nn_pred, plot  = T)
nn_pred
ROC2 <- roc(test$class, as.numeric(nnet_pred))
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
nn <- nnet(class~., data = train, size = 2)
nn_pred = predict(nn2, newdata = test)
plot(nn)
ROC2 <- roc(test$class, as.numeric(nnet_pred))
plot(ROC2, col = "purple")
title("Single Layer NN Model AUC")
AUC2 <- auc(ROC2)
AUC2
head(pulsar, 3)
str(pulsar)
ggplot(pulsar) +
aes(x = excess_kurt_int_prof, y = excess_kurt_dm_snr, colour = class) +
geom_point(size = 1.06) +
scale_color_viridis_d(option = "viridis") +
labs(x = "Excess Kurtosis of Integrated Profile", y = "Excess Kurtosis of DM SNR Curve", title = "Pulsars") +
theme_modern_rc() +
facet_wrap(vars(class))
ggplot(pulsar) +
aes(x = mean_int_prof, y = mean_dm_snr, colour = class) +
geom_point(size = 1.06) +
scale_color_viridis_d(option = "viridis") +
labs(x = "Mean of Integrated Profile", y = "Mean of DM SNR Curve", title = "Pulsars") +
theme_modern_rc() +
facet_wrap(vars(class))
#Just based on these 4 variables the data looks seperable upon first glance...
ggplot(pulsar,aes(x = mean_int_prof, y = excess_kurt_int_prof)) +
geom_point(na.rm = T, aes(color = mean_dm_snr)) + geom_smooth()
#lets make a scatter plot to see the correlation visually
ggplot(data = pulsar, aes(x=std_dm_snr, y=excess_kurt_dm_snr))+
geom_point()
#lets perform a f(x) = 1/x transformation to make the data linear...
ggplot(data = pulsar, aes(x=1/std_dm_snr, y=excess_kurt_dm_snr))+
geom_point()+
geom_smooth(method="lm")
#polynomial might give us a better fit
ggplot(data = pulsar, aes(x=1/std_dm_snr, y=excess_kurt_dm_snr))+
geom_point()+
geom_smooth(method="lm", formula = y ~ poly(x,3))
pulsar$class = as.numeric(pulsar$class)-1
correlation_matrix = cor(pulsar)
corrplot(correlation_matrix, method="circle", bg = "grey", title = "Correlation Matrix")
cor.test(pulsar$std_int_prof, pulsar$excess_kurt_dm_snr)
pulsar$class = as.factor(pulsar$class)
head(pulsar, 3)
str(pulsar)
ggplot(pulsar) +
aes(x = excess_kurt_int_prof, y = excess_kurt_dm_snr, colour = class) +
geom_point(size = 1.06) +
scale_color_viridis_d(option = "viridis") +
labs(x = "Excess Kurtosis of Integrated Profile", y = "Excess Kurtosis of DM SNR Curve", title = "Pulsars") +
theme_modern_rc() +
facet_wrap(vars(class))
ggplot(pulsar) +
aes(x = mean_int_prof, y = mean_dm_snr, colour = class) +
geom_point(size = 1.06) +
scale_color_viridis_d(option = "viridis") +
labs(x = "Mean of Integrated Profile", y = "Mean of DM SNR Curve", title = "Pulsars") +
theme_modern_rc() +
facet_wrap(vars(class))
#Just based on these 4 variables the data looks seperable upon first glance...
ggplot(pulsar,aes(x = mean_int_prof, y = excess_kurt_int_prof)) +
geom_point(na.rm = T, aes(color = mean_dm_snr)) + geom_smooth()
#lets make a scatter plot to see the correlation visually
ggplot(data = pulsar, aes(x=std_dm_snr, y=excess_kurt_dm_snr))+
geom_point()
#lets perform a f(x) = 1/x transformation to make the data linear...
ggplot(data = pulsar, aes(x=1/std_dm_snr, y=excess_kurt_dm_snr))+
geom_point()+
geom_smooth(method="lm")
#polynomial might give us a better fit
ggplot(data = pulsar, aes(x=1/std_dm_snr, y=excess_kurt_dm_snr))+
geom_point()+
geom_smooth(method="lm", formula = y ~ poly(x,3))
pulsar$class = as.numeric(pulsar$class)-1
correlation_matrix = cor(pulsar)
corrplot(correlation_matrix, method="circle", bg = "grey", title = "Correlation Matrix")
cor.test(pulsar$std_int_prof, pulsar$excess_kurt_dm_snr)
pulsar$class = as.factor(pulsar$class)
